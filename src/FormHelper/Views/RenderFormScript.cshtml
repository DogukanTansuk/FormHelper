@using FormHelper
@inject FormHelperConfiguration Configuration
@model RenderFormScriptModel

<script>
    (function () {

        $("#@Model.FormId").submit(function (e) {

            @if (Configuration.DebugMode) { <text>debugger;</text> }

            e.preventDefault();

            var $form = $(this);

            @if (Model.IsMobileDevice)
            {
                @(Html.Raw("toastr.options.positionClass =  \"toast-top-full-width\";"));
            }

            $("#@Model.FormId").removeData("validator");
            $("#@Model.FormId").removeData("unobtrusiveValidation");
            $.validator.unobtrusive.parse($("#@Model.FormId"));

            var validationResult = $("#@Model.FormId").valid();

            if (!validationResult) {
                toastr.error("@Configuration.CheckTheFormFieldsMessage");
                return false;
            }

            $form.find("button[type='submit']").attr('disabled', 'disabled');

            var headers = {};

            @if(Model.DataType == FormDataType.FormData)
            {
                <text>
                var formData = new FormData($form[0]);
                var contentType = false;
                </text>
            }
            else
            {
                <text>
                var formDataAsJson = new Object();

                $.each($("#@Model.FormId").serializeArray(), function (key, item) {
                    formDataAsJson[item.name] = item.value;
                });

                if (formDataAsJson.__RequestVerificationToken !== undefined) {
                    headers['RequestVerificationToken'] = formDataAsJson.__RequestVerificationToken;
                }

                var formData = JSON.stringify(formDataAsJson);
                var contentType = "application/json; charset=utf-8";

                </text>
            }

            

            $.ajax({
                url: $form.attr("action"),
                type: $form.attr("method"),
                headers: headers,
                data: formData,
                contentType: contentType,
                data: formData,
                processData: false,
                beforeSend: function (arr) {
                    @if(!string.IsNullOrWhiteSpace(Model.BeforeSubmit)) {
                        @(Html.Raw($"var beforeSubmitResult = {Model.BeforeSubmit}(arr, $form); if(beforeSubmitResult == false){{ return false; }}"))
                    }
                },
                success: function (result, status)
                {
                    @if (Configuration.DebugMode) { <text>debugger;</text> }

                    if (!result.isSucceed) {
                        $form.find("button[type='submit']").removeAttr('disabled');
                    }

                    if (result.message !== null && result.message != "") {
                        if (result.isSucceed) {
                            toastr.success(result.message);
                        } else {
                            if (result.status == @FormResultStatus.Info.GetHashCode()) {
                                toastr.info(result.message);
                            } else if (result.status == @FormResultStatus.Warning.GetHashCode()) {
                                toastr.warning(result.message);
                            } else if (result.status == @FormResultStatus.Error.GetHashCode()) {
                                toastr.error(result.message);
                            }
                        }
                    }

                    if (result.validationErrors != null && result.validationErrors.length > 0) {
                        $form.find("button[type='submit']").removeAttr('disabled');
                        var validator = $("#@Model.FormId").validate();
                        for (var i in result.validationErrors) {
                            var propertyName = result.validationErrors[i].propertyName;
                            var errorMessage = result.validationErrors[i].message;
                            var obj = new Object();
                            obj[propertyName] = errorMessage;
                            validator.showErrors(obj);
                        }

                        if (result.message === null || result.message === "" || result.message === undefined) {
                            toastr.error("@Configuration.CheckTheFormFieldsMessage");
                        }
                    }

                    @if(!string.IsNullOrWhiteSpace(Model.Callback)) {
                        @(Html.Raw($"{Model.Callback}(result);"));
                    }

                    if (result.redirectUri != null){
                        setTimeout(function() {
                            window.location.replace(result.redirectUri);
                        }, result.message !== null ? @Configuration.RedirectDelay : 1);
                    }
                },
                error: function (request, status, error) {
                    @if (Configuration.DebugMode) { <text>debugger;</text> }
                    console.error(request.responseText);
                    toastr.error(request.responseText);
                }
            });
        });

    })();
</script>