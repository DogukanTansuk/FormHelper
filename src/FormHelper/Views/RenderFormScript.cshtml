@using FormHelper
@inject FormHelperConfiguration Configuration
@model RenderFormScriptModel

    <script>
    $(document).ready(function () {

    @if (Configuration.UsePascalCaseJson)
    {
        <text>
            function toCamel(o) {
          var newO, origKey, newKey, value
          if (o instanceof Array) {
            return o.map(function(value) {
                if (typeof value === "object") {
                  value = toCamel(value)
                }
                return value
            })
          } else {
            newO = {}
            for (origKey in o) {
              if (o.hasOwnProperty(origKey)) {
                newKey = (origKey.charAt(0).toLowerCase() + origKey.slice(1) || origKey).toString()
                value = o[origKey]
                if (value instanceof Array || (value !== null && value.constructor === Object)) {
                  value = toCamel(value)
                }
                newO[newKey] = value
              }
            }
          }
          return newO
        }
        </text>
    }

    $("#@Model.FormId").submit(function() {

        $(this).removeData("validator");
        $(this).removeData("unobtrusiveValidation");
        $.validator.unobtrusive.parse($(this));

        var validationResult = $(this).valid();

        if (!validationResult) {
            toastr.error("@Configuration.CheckTheFormFieldsMessage");
        }
    });

    $("#@Model.FormId").ajaxForm({
        beforeSubmit: function (arr, $form, options) {

            @if (Model.IsMobileDevice)
            {
                @(Html.Raw("toastr.options.positionClass =  \"toast-top-full-width\";"));
            }
            @if(!string.IsNullOrWhiteSpace(Model.BeforeSubmit)) {
                @(Html.Raw($"var result = {Model.BeforeSubmit}(arr, $form, options); if(result == false){{ return false; }}"))
            }
        },
        success: function (result, statusText, xhr, $form) {

            @if (Configuration.UsePascalCaseJson)
            {
                <text>
                    result = toCamel(result);
                </text>
            }


            if (!result.isSucceed) {
                $form.find("button[type='submit'], button[type='reset']").removeAttr('disabled');
            }

            if (result.message !== null && result.message != "") {
                if (result.isSucceed) {
                    toastr.success(result.message);
                } else {
                    if (result.status == @FormResultStatus.Info.GetHashCode()) {
                        toastr.info(result.message);
                    } else if (result.status == @FormResultStatus.Warning.GetHashCode()) {
                        toastr.warning(result.message);
                    } else if (result.status == @FormResultStatus.Error.GetHashCode()) {
                        toastr.error(result.message);
                    }
                }
            }

            if (result.validationErrors != null && result.validationErrors.length > 0) {
                $form.find("button[type='submit'], button[type='reset']").removeAttr('disabled');
                var validator = $("#@Model.FormId").validate();
                for (var i in result.validationErrors) {
                    var propertyName = result.validationErrors[i].propertyName;
                    var errorMessage = result.validationErrors[i].message;
                    var obj = new Object();
                    obj[propertyName] = errorMessage;
                    validator.showErrors(obj);
                }
            }

            @if(!string.IsNullOrWhiteSpace(Model.Callback)) {
                @(Html.Raw($"{Model.Callback}(result);"))
            }

            if (result.redirectUri != null){
                setTimeout(function() {
                    window.location.replace(result.redirectUri);
                }, result.message !== null ? @Configuration.RedirectDelay : 1);
            }
        }
    });

});
    </script>